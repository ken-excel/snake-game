{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["cols","rows","i","push","App","props","state","input","direction","food","snake","head","tails","handleKeypress","bind","x","Math","floor","random","y","foodGrid","this","getRandomGrid","isOnSnake","length","isOnSnakeTail","isOnSnakeHead","setState","generateFood","newFood","newSnake","newDirection","colNum","rowNum","pop","score","alert","reset","e","newInput","keyCode","document","body","addEventListener","window","interval","setInterval","updateSnake","removeEventListener","clearInterval","className","map","isFood","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f2f6ea5b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nconst frameRate = 5; //fps - how many loop per seconds\nconst colNum = 10; //stage column(x)\nconst rowNum = 10; //stage row(y)\nconst cols = [];\nconst rows = [];\n\nfor (let i = 0; i < colNum; i++) {\n  cols.push(i);\n}\n\nfor (let i = 0; i < rowNum; i++) {\n  rows.push(i);\n}\n\nclass App extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        input: 'right',\n        direction: 'right',\n        food: {},\n        snake: {\n            head: {},\n            tails: []\n        }\n      };\n      this.handleKeypress = this.handleKeypress.bind(this);\n    }\n\n\n    getRandomGrid(){\n        return {\n            x: Math.floor((Math.random() * colNum)),\n            y: Math.floor((Math.random() * rowNum))\n        }\n    }\n\n    generateFood(){\n      let foodGrid = this.getRandomGrid();\n      while(this.isOnSnake(foodGrid.x, foodGrid.y)){\n          foodGrid = this.getRandomGrid();\n      }\n      return foodGrid;\n    }\n\n    isFood(x, y){\n      let food = this.state.food;\n      if(food.x === x && food.y === y) return true;\n      return false;\n    }\n\n    isOnSnakeTail(x, y){\n        let snake = this.state.snake;\n        for(let i = 0; i < snake.tails.length; i++) {\n            if(snake.tails[i].x === x && snake.tails[i].y === y) return true;\n        }\n        return false;\n    }\n\n    isOnSnakeHead(x,y){\n        let snake = this.state.snake;\n        if(snake.head.x === x && snake.head.y === y) return true;\n        return false;\n    }\n\n    isOnSnake(x, y){\n        return this.isOnSnakeTail(x,y)&&this.isOnSnakeHead(x,y);\n    }\n\n    reset(){\n        this.setState({\n            input: 'right',\n            direction: 'right',\n            food: this.generateFood(),\n            snake: {\n                head: {\n                    x: Math.floor((colNum-1)/2),\n                    y: Math.floor((rowNum-1)/2) \n                },\n                tails: []\n            }\n        });\n    }\n\n    updateSnake(){\n        //update position\n        const {input, direction, snake, food} = this.state;\n        let newFood = {...food};\n        let newSnake = {...snake};\n        let newDirection = '';\n        newSnake.tails = [{...newSnake.head} , ...newSnake.tails];\n\n        switch (input) {\n            case \"left\":\n                newDirection = direction === 'right' ? direction : 'left';\n                break;\n            case \"up\":\n                newDirection = direction === 'down' ? direction : 'up';\n                break;\n            case \"right\":\n                newDirection = direction === 'left' ? direction : 'right';\n                break;\n            case \"down\":\n                newDirection = direction === 'up' ? direction : 'down';\n                break;\n            default:\n        }\n\n        switch (newDirection) {\n            case \"left\":\n                newSnake.head.x -= 1;\n                if(newSnake.head.x < 0) newSnake.head.x = colNum-1;\n                break;\n            case \"up\":\n                newSnake.head.y -= 1;\n                if(newSnake.head.y < 0) newSnake.head.y = rowNum-1;\n                break;\n            case \"right\":\n                newSnake.head.x += 1;\n                if(newSnake.head.x > colNum-1) newSnake.head.x = 0;\n                break;\n            case \"down\":\n                newSnake.head.y += 1;\n                if(newSnake.head.y > rowNum-1) newSnake.head.y = 0;\n                break;\n            default:\n        }\n\n        //if collide with food \n        if(this.isOnSnakeHead(food.x, food.y)){\n            newFood = this.generateFood();\n        }\n        else{\n            newSnake.tails.pop();\n        }\n\n        //if collide with self\n        if(this.isOnSnakeTail(newSnake.head.x, newSnake.head.y)){\n            const score = newSnake.tails.length+1;\n            alert(\"Game Over, Score =\" + score);\n            this.reset();\n        }\n        else{\n            this.setState({\n                food: newFood,\n                snake: newSnake,\n                direction: newDirection\n            });\n        }\n    }\n\n    handleKeypress(e){\n        let newInput = '';\n        switch (e.keyCode) {\n            case 37:\n            case 65:\n                newInput = 'left';\n                break;\n      \n            case 38:\n            case 87:\n                newInput = 'up';\n                break;\n      \n            case 39:\n            case 68:\n                newInput = 'right';\n                break;\n      \n            case 40:\n            case 83:\n                newInput = 'down';\n                break;\n\n            default:\n        }\n        this.setState({input: newInput});\n    }\n\n    componentDidMount(){\n        document.body.addEventListener('keydown', this.handleKeypress);\n        this.reset();\n        window.interval = setInterval(()=>{\n            this.updateSnake();\n        }, 1000/frameRate);\n    }\n\n    componentWillUnmount(){\n        document.body.removeEventListener('keydown', this.handleKeypress);\n        clearInterval(window.interval);\n    }\n\n    render(){\n      return(\n        <div className=\"app\">\n            <h1>Snake Game</h1>\n            <div className = \"grid\">\n              {rows.map(y => {\n                return(\n                  <div className = \"grid-row\" key={y}>\n                    {cols.map(x => {\n                      return(\n                        <div \n                          key={x}\n                          className = {\n                            this.isOnSnakeTail(x,y)\n                            ? 'grid-cell snake-tail' : this.isOnSnakeHead(x,y) \n                            ? 'grid-cell snake-head' : this.isFood(x,y)\n                            ? 'grid-cell food' : 'grid-cell'\n                          }\n                        />\n                      );\n                    })}\n                  </div>\n                );\n              })}\n            </div>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}